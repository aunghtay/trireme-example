// Automatically generated by MockGen. DO NOT EDIT!
// Source: rpctypes.go

// nolint
package rpcmonitor

import gomock "github.com/golang/mock/gomock"

// Mock of MonitorProcessor interface
type MockMonitorProcessor struct {
	ctrl     *gomock.Controller
	recorder *_MockMonitorProcessorRecorder
}

// Recorder for MockMonitorProcessor (not exported)
type _MockMonitorProcessorRecorder struct {
	mock *MockMonitorProcessor
}

func NewMockMonitorProcessor(ctrl *gomock.Controller) *MockMonitorProcessor {
	mock := &MockMonitorProcessor{ctrl: ctrl}
	mock.recorder = &_MockMonitorProcessorRecorder{mock}
	return mock
}

func (_m *MockMonitorProcessor) EXPECT() *_MockMonitorProcessorRecorder {
	return _m.recorder
}

func (_m *MockMonitorProcessor) Start(eventInfo *EventInfo) error {

	ret := _m.ctrl.Call(_m, "Start", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMonitorProcessorRecorder) Start(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0)
}

func (_m *MockMonitorProcessor) Stop(eventInfo *EventInfo) error {
	ret := _m.ctrl.Call(_m, "Stop", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMonitorProcessorRecorder) Stop(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop", arg0)
}

func (_m *MockMonitorProcessor) Create(eventInfo *EventInfo) error {
	ret := _m.ctrl.Call(_m, "Create", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMonitorProcessorRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockMonitorProcessor) Destroy(eventInfo *EventInfo) error {
	ret := _m.ctrl.Call(_m, "Destroy", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMonitorProcessorRecorder) Destroy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Destroy", arg0)
}

func (_m *MockMonitorProcessor) Pause(eventInfo *EventInfo) error {
	ret := _m.ctrl.Call(_m, "Pause", eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMonitorProcessorRecorder) Pause(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pause", arg0)
}
