// Automatically generated by MockGen. DO NOT EDIT!
// Source: interfaces.go

// nolint
package mock_contextstore

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of ContextStore interface
type MockContextStore struct {
	ctrl     *gomock.Controller
	recorder *_MockContextStoreRecorder
}

// Recorder for MockContextStore (not exported)
type _MockContextStoreRecorder struct {
	mock *MockContextStore
}

func NewMockContextStore(ctrl *gomock.Controller) *MockContextStore {
	mock := &MockContextStore{ctrl: ctrl}
	mock.recorder = &_MockContextStoreRecorder{mock}
	return mock
}

func (_m *MockContextStore) EXPECT() *_MockContextStoreRecorder {
	return _m.recorder
}

func (_m *MockContextStore) StoreContext(contextID string, eventInfo interface{}) error {
	ret := _m.ctrl.Call(_m, "StoreContext", contextID, eventInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockContextStoreRecorder) StoreContext(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StoreContext", arg0, arg1)
}

func (_m *MockContextStore) DestroyStore() error {
	ret := _m.ctrl.Call(_m, "DestroyStore")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockContextStoreRecorder) DestroyStore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DestroyStore")
}

func (_m *MockContextStore) GetContextInfo(contextID string) (interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetContextInfo", contextID)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockContextStoreRecorder) GetContextInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContextInfo", arg0)
}

func (_m *MockContextStore) RemoveContext(contextID string) error {
	ret := _m.ctrl.Call(_m, "RemoveContext", contextID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockContextStoreRecorder) RemoveContext(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveContext", arg0)
}

func (_m *MockContextStore) WalkStore() (chan string, error) {
	ret := _m.ctrl.Call(_m, "WalkStore")
	ret0, _ := ret[0].(chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockContextStoreRecorder) WalkStore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WalkStore")
}
